---
- name: Install the ansible-test-wrapper script
  become: yes
  copy:
    src: ansible-test-wrapper
    dest: /usr/local/bin
    mode: '0755'

- name: Write .emacs
  copy:
    dest: "{{ ansible_env.HOME }}/.emacs"
    content: "{{ dot_emacs_data }}"
  when: dot_emacs_data is defined

- name: Write .vimrc
  copy:
    dest: "{{ ansible_env.HOME }}/.vimrc"
    content: "{{ dot_vimrc_data }}"
  when: dot_vimrc_data is defined

- name: Write .ssh/id_rsa
  copy:
    dest: "{{ ansible_env.HOME }}/.ssh/id_rsa"
    content: "{{ id_rsa_data }}"
    mode: '0400'
  when: id_rsa_data is defined

- name: Enable storage of git credentials
  git_config:
    scope: global
    name: credential.helper
    value: store

- name: Configure git user.name
  git_config:
    scope: global
    name: user.name
    value: "{{ git.user.name }}"
  when: git.user.name is defined

- name: Configure git user.email
  git_config:
    scope: global
    name: user.email
    value: "{{ git.user.email }}"
  when: git.user.email is defined

- name: Get github.com host key
  shell: "ssh-keyscan -t rsa github.com"
  changed_when: false
  register: host_key_result

- name: Ensure that github.com is a known host
  lineinfile:
    path: "{{ ansible_env.HOME }}/.ssh/known_hosts"
    line: "{{ host_key_result.stdout }}"
    create: yes

- name: See if there is an ansible clone
  stat:
    path: "{{ clone_path }}"
  register: clone_result

- name: See if we have an ansible clone archive
  stat:
    path: "{{ archive_path }}"
  register: archive_result

- name: Ensure ansible clone directory present
  file:
    path: "{{ clone_path }}"
    state: directory

- name: Unpack ansible clone into the directory
  unarchive:
    remote_src: yes
    src: "{{ archive_path }}"
    dest: "{{ clone_path }}/.."
  when: not clone_result.stat.exists and archive_result.stat.exists

- name: Clone or update ansible from github
  git:
    repo: "{{ ansible_repo }}"
    dest: "{{ clone_path }}"
    version: "{{ checkout_version }}"

- name: Create an ansible clone archive unless we have one
  archive:
    path: "{{ clone_path }}"
    dest: "{{ archive_path }}"
  when: not archive_result.stat.exists

- name: Create python virtual environment
  shell: 'python3 -m venv venv && . venv/bin/activate && pip install -r requirements.txt'
  args:
    chdir: "{{ clone_path }}"
    creates: "{{ clone_path }}/venv"

- name: Put env-setup source file in place
  copy:
    src: env-setup
    dest: "{{ ansible_env.HOME}}/env-setup"

- name: Compact prompts
  lineinfile:
    path: "{{ ansible_env.HOME}}/.bashrc"
    regexp: "( *PS1=').*\\\\u@\\\\h.*:(.*)\\\\w(.* ')"
    line: '\1\2\\W\3'
    backrefs: yes
  with_sequence: start=1 end=2

- name: Create an alias for env-setup
  lineinfile:
    path: "{{ ansible_env.HOME}}/.bash_aliases"
    line: "alias env-setup='. ~/env-setup'"
    create: yes
